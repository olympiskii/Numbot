import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from sqlalchemy.orm import Session
from sqlalchemy import func
from models import Base, engine, SessionLocal, init_db, User, Category, Transaction, SavingsGoal, Budget
from config import Config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    transaction_type = State()
    amount = State()
    category = State()
    new_category = State()
    savings_name = State()
    savings_target = State()
    savings_date = State()
    savings_deposit = State()
    budget_category = State()
    budget_amount = State()
    budget_period = State()
    report_period = State()

# =====================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =====================

def get_main_kb():
    kb = [
        [KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥"), KeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –û—Ç—á–µ—Ç"), KeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç—ã"), KeyboardButton(text="üéØ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_cancel_kb():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

async def get_categories_kb(user_id: int, action: str = "transaction"):
    with SessionLocal() as session:
        categories = session.query(Category).filter_by(user_id=user_id).all()
        builder = InlineKeyboardBuilder()
        for cat in categories:
            builder.button(text=cat.name, callback_data=f"{action}_cat_{cat.id}")
        
        if action in ["transaction", "budget"]:
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"new_{action}_category")
        
        builder.adjust(1)
        return builder.as_markup()

# =====================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# =====================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    with SessionLocal() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(telegram_id=message.from_user.id)
            session.add(user)
            session.commit()
    
    await message.answer(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "‚ûï –î–æ—Ö–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "‚ûñ –†–∞—Å—Ö–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "üìä –û—Ç—á–µ—Ç - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
        "üí∞ –ë—é–¥–∂–µ—Ç—ã - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤\n"
        "üéØ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è - —Ü–µ–ª–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π"
    )
    await message.answer(help_text, parse_mode="HTML")

# =====================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ú–ï–ù–´ –ò –í–û–ó–í–†–ê–¢–ê
# =====================

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_operation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_kb()
    )

@dp.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_kb()
    )

# =====================
# –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
# =====================

@dp.message(F.text.in_(["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"]))
async def start_transaction(message: Message, state: FSMContext):
    await state.update_data(transaction_type="income" if message.text == "‚ûï –î–æ—Ö–æ–¥" else "expense")
    await state.set_state(Form.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=get_cancel_kb())

@dp.message(Form.amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await state.set_state(Form.category)
        
        user_id = message.from_user.id
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=await get_categories_kb(user_id, "transaction")
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):", reply_markup=get_cancel_kb())

@dp.callback_query(Form.category, F.data.startswith("transaction_cat_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        
        with SessionLocal() as session:
            transaction = Transaction(
                user_id=callback.from_user.id,
                amount=data['amount'],
                category_id=category_id,
                is_income=data['transaction_type'] == 'income',
                created_at=datetime.now()
            )
            
            if not data['transaction_type'] == 'income':
                budgets = session.query(Budget).filter_by(category_id=category_id).all()
                for budget in budgets:
                    budget.current_spent += data['amount']
            
            session.add(transaction)
            session.commit()
        
        await callback.message.answer(
            f"‚úÖ {'–î–æ—Ö–æ–¥' if data['transaction_type'] == 'income' else '–†–∞—Å—Ö–æ–¥'} {data['amount']} ‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=get_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            reply_markup=get_main_kb()
        )
    finally:
        await state.clear()

@dp.callback_query(Form.category, F.data == "new_transaction_category")
async def new_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_cancel_kb())
    await state.set_state(Form.new_category)

@dp.message(Form.new_category)
async def save_category(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=get_cancel_kb())
        return
    
    with SessionLocal() as session:
        exists = session.query(Category).filter_by(
            user_id=message.from_user.id,
            name=name
        ).first()
        if exists:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_main_kb())
            await state.clear()
            return
        
        category = Category(
            name=name,
            user_id=message.from_user.id
        )
        session.add(category)
        session.commit()
        
        data = await state.get_data()
        if 'amount' in data:
            transaction = Transaction(
                user_id=message.from_user.id,
                amount=data['amount'],
                category_id=category.id,
                is_income=data['transaction_type'] == 'income',
                created_at=datetime.now()
            )
            session.add(transaction)
            session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"–°—É–º–º–∞: {data['amount']} ‚ÇΩ",
                reply_markup=get_main_kb()
            )
        else:
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω–∞!",
                reply_markup=get_main_kb()
            )
        
        await state.clear()

# =====================
# –ö–ê–¢–ï–ì–û–†–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
# =====================

@dp.message(F.text == "üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_menu(message: Message):
    with SessionLocal() as session:
        categories = session.query(Category).filter_by(user_id=message.from_user.id).all()
        
        if not categories:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=get_main_kb())
            return
        
        text = "üìù –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        for cat in categories:
            count = session.query(Transaction).filter_by(category_id=cat.id).count()
            total = session.query(func.sum(Transaction.amount)).filter_by(category_id=cat.id).scalar() or 0
            text += f"- {cat.name} ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: {total:.2f} ‚ÇΩ)\n"
        
        await message.answer(
            text,
            reply_markup=await get_categories_kb(message.from_user.id, "view")
        )

@dp.callback_query(F.data.startswith("view_cat_"))
async def view_category(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    with SessionLocal() as session:
        category = session.get(Category, category_id)
        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        transactions = session.query(Transaction).filter_by(
            category_id=category_id
        ).order_by(Transaction.created_at.desc()).limit(10).all()
        
        response = [f"üìä <b>{category.name}</b>\n"]
        for t in transactions:
            response.append(
                f"{'‚ûï' if t.is_income else '‚ûñ'} {t.amount} ‚ÇΩ "
                f"({t.created_at.strftime('%d.%m.%Y')})"
            )
        
        if not transactions:
            response.append("\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        await callback.message.answer(
            "\n".join(response),
            parse_mode="HTML",
            reply_markup=get_main_kb()
        )
    await callback.answer()

# =====================
# –û–¢–ß–ï–¢–´ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
# =====================

@dp.message(F.text == "üìä –û—Ç—á–µ—Ç")
async def report_menu(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="–ó–∞ –≥–æ–¥")],
            [KeyboardButton(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)
    await state.set_state(Form.report_period)

@dp.message(Form.report_period)
async def generate_report(message: Message, state: FSMContext):
    period = message.text
    with SessionLocal() as session:
        try:
            if period == "–ó–∞ –º–µ—Å—è—Ü":
                date_from = datetime.now() - timedelta(days=30)
            elif period == "–ó–∞ –≥–æ–¥":
                date_from = datetime.now() - timedelta(days=365)
            else:
                date_from = datetime.min
            
            # –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
            income = session.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == message.from_user.id,
                Transaction.is_income == True,
                Transaction.created_at >= date_from
            ).scalar() or 0
            
            expense = session.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == message.from_user.id,
                Transaction.is_income == False,
                Transaction.created_at >= date_from
            ).scalar() or 0
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            expense_by_cat = session.query(
                Category.name,
                func.sum(Transaction.amount).label('total')
            ).join(Transaction).filter(
                Transaction.user_id == message.from_user.id,
                Transaction.is_income == False,
                Transaction.created_at >= date_from
            ).group_by(Category.name).order_by(func.sum(Transaction.amount).desc()).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = [
                f"üìä <b>–û—Ç—á–µ—Ç {period.lower()}</b>",
                f"‚ûñ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f} ‚ÇΩ",
                f"‚ûï –î–æ—Ö–æ–¥—ã: {income:.2f} ‚ÇΩ",
                f"üßÆ –ë–∞–ª–∞–Ω—Å: {income - expense:.2f} ‚ÇΩ",
                "",
                "<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>"
            ]
            
            for cat in expense_by_cat:
                report.append(f"- {cat.name}: {cat.total:.2f} ‚ÇΩ")
            
            if not expense_by_cat:
                report.append("\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            
            await message.answer(
                "\n".join(report),
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
                reply_markup=get_main_kb()
            )
        finally:
            await state.clear()

# =====================
# –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
# =====================

@dp.message(F.text == "üéØ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")
async def savings_menu(message: Message):
    with SessionLocal() as session:
        goals = session.query(SavingsGoal).filter_by(user_id=message.from_user.id).all()
        
        if not goals:
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å")],
                    [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
                ],
                resize_keyboard=True
            )
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.", reply_markup=kb)
            return
        
        text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:\n\n"
        for goal in goals:
            progress = (goal.current_amount / goal.target_amount) * 100
            remaining = goal.target_amount - goal.current_amount
            text += (
                f"üìå <b>{goal.name}</b>\n"
                f"–¶–µ–ª—å: {goal.target_amount:.2f} ‚ÇΩ\n"
                f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {goal.current_amount:.2f} ‚ÇΩ ({progress:.1f}%)\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.2f} ‚ÇΩ\n"
                f"{'–°—Ä–æ–∫: ' + goal.target_date.strftime('%d.%m.%Y') if goal.target_date else ''}\n\n"
            )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å"), KeyboardButton(text="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")],
                [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å")
async def start_create_goal(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:", reply_markup=get_cancel_kb())
    await state.set_state(Form.savings_name)

@dp.message(Form.savings_name)
async def process_goal_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É:", reply_markup=get_cancel_kb())
    await state.set_state(Form.savings_target)

@dp.message(Form.savings_target)
async def process_target_amount(message: Message, state: FSMContext):
    try: 
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(target_amount=amount)
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ü–µ–ª–∏ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=kb
        )
        await state.set_state(Form.savings_date)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:", reply_markup=get_cancel_kb())

@dp.message(Form.savings_date)
async def process_target_date(message: Message, state: FSMContext):
    data = await state.get_data()
    target_date = None
    
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        try:
            target_date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if target_date < datetime.now().date():
                await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:", reply_markup=get_cancel_kb())
                return
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=get_cancel_kb())
            return
    
    with SessionLocal() as session:
        goal = SavingsGoal(
            user_id=message.from_user.id,
            name=data['name'],
            target_amount=data['target_amount'],
            current_amount=0.0,
            target_date=target_date
        )
        session.add(goal)
        session.commit()
    
    await message.answer(
        f"‚úÖ –¶–µ–ª—å ¬´{data['name']}¬ª —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {data['target_amount']} ‚ÇΩ\n"
        f"{'–°—Ä–æ–∫: ' + target_date.strftime('%d.%m.%Y') if target_date else '–ë–µ–∑ —Å—Ä–æ–∫–∞'}",
        reply_markup=get_main_kb()
    )
    await state.clear()

@dp.message(F.text == "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def start_deposit(message: Message, state: FSMContext):
    with SessionLocal() as session:
        goals = session.query(SavingsGoal).filter_by(user_id=message.from_user.id).all()
        
        if not goals:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=get_main_kb())
            return
        
        builder = InlineKeyboardBuilder()
        for goal in goals:
            builder.button(
                text=f"{goal.name} ({goal.current_amount:.2f}‚ÇΩ/{goal.target_amount:.2f}‚ÇΩ)",
                callback_data=f"deposit_{goal.id}"
            )
        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Form.savings_deposit)

@dp.callback_query(Form.savings_deposit, F.data.startswith("deposit_"))
async def select_goal_for_deposit(callback: CallbackQuery, state: FSMContext):
    goal_id = int(callback.data.split("_")[1])
    await state.update_data(goal_id=goal_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_cancel_kb()
    )
    await callback.answer()

@dp.message(Form.savings_deposit)
async def process_deposit_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        data = await state.get_data()
        
        with SessionLocal() as session:
            goal = session.get(SavingsGoal, data['goal_id'])
            if not goal:
                await message.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            goal.current_amount += amount
            session.commit()
            
            progress = (goal.current_amount / goal.target_amount) * 100
            remaining = goal.target_amount - goal.current_amount
            
            response = [
                f"‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ü–µ–ª—å <b>¬´{goal.name}¬ª</b> –Ω–∞ {amount:.2f} ‚ÇΩ",
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {goal.current_amount:.2f} ‚ÇΩ –∏–∑ {goal.target_amount:.2f} ‚ÇΩ",
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%",
                f"üìå –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: {remaining:.2f} ‚ÇΩ"
            ]
            
            if goal.target_amount <= goal.current_amount:
                response.append("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            
            await message.answer(
                "\n".join(response),
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )
        
        await state.clear()
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:", reply_markup=get_cancel_kb())

# =====================
# –ë–Æ–î–ñ–ï–¢–´ (–ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø)
# =====================

@dp.message(F.text == "üí∞ –ë—é–¥–∂–µ—Ç—ã")
async def budgets_menu(message: Message):
    with SessionLocal() as session:
        budgets = session.query(Budget).filter_by(user_id=message.from_user.id).all()
        
        if not budgets:
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç")],
                    [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
                ],
                resize_keyboard=True
            )
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.", reply_markup=kb)
            return
        
        text = "üí∞ –í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:\n\n"
        for budget in budgets:
            remaining = budget.amount - budget.current_spent
            progress = (budget.current_spent / budget.amount) * 100 if budget.amount > 0 else 0
            
            status = "‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö" if remaining >= 0 else f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {abs(remaining):.2f} ‚ÇΩ"
            
            text += (
                f"üìå <b>{budget.category.name}</b>\n"
                f"–õ–∏–º–∏—Ç: {budget.amount:.2f} ‚ÇΩ ({budget.period})\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget.current_spent:.2f} ‚ÇΩ ({progress:.1f}%)\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {remaining:.2f} ‚ÇΩ\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å")],
                [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç")
async def start_create_budget(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±—é–¥–∂–µ—Ç–∞:",
        reply_markup=await get_categories_kb(user_id, "budget")
    )
    await state.set_state(Form.budget_category)

@dp.callback_query(Form.budget_category, F.data.startswith("budget_cat_"))
async def select_budget_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(category_id=category_id)
    
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–µ–Ω—å"), KeyboardButton(text="–ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="–ú–µ—Å—è—Ü"), KeyboardButton(text="–ì–æ–¥")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—é–¥–∂–µ—Ç–∞:",
        reply_markup=kb
    )
    await state.set_state(Form.budget_period)
    await callback.answer()

@dp.message(Form.budget_period)
async def process_budget_period(message: Message, state: FSMContext):
    period = message.text.lower()
    if period not in ["–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–≥–æ–¥"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(period=period)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞:", reply_markup=get_cancel_kb())
    await state.set_state(Form.budget_amount)

@dp.message(Form.budget_amount)
async def process_budget_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        data = await state.get_data()
        
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞
            existing = session.query(Budget).filter_by(
                user_id=message.from_user.id,
                category_id=data['category_id'],
                period=data['period']
            ).first()
            
            if existing:
                existing.amount = amount
                existing.current_spent = 0
                existing.start_date = datetime.now()
                session.commit()
                action = "–æ–±–Ω–æ–≤–ª–µ–Ω"
            else:
                budget = Budget(
                    user_id=message.from_user.id,
                    category_id=data['category_id'],
                    amount=amount,
                    period=data['period'],
                    current_spent=0.0,
                    start_date=datetime.now()
                )
                session.add(budget)
                session.commit()
                action = "—Å–æ–∑–¥–∞–Ω"
            
            category = session.get(Category, data['category_id'])
            
            await message.answer(
                f"‚úÖ –ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>¬´{category.name}¬ª</b> {action}!\n"
                f"–õ–∏–º–∏—Ç: {amount:.2f} ‚ÇΩ ({data['period']})",
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )
        
        await state.clear()
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):", reply_markup=get_cancel_kb())

@dp.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
async def reset_budgets(message: Message):
    with SessionLocal() as session:
        budgets = session.query(Budget).filter_by(user_id=message.from_user.id).all()
        
        if not budgets:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –±—é–¥–∂–µ—Ç–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞", reply_markup=get_main_kb())
            return
        
        for budget in budgets:
            budget.current_spent = 0
            budget.start_date = datetime.now()
        
        session.commit()
    
    await message.answer(
        "‚úÖ –í—Å–µ –±—é–¥–∂–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã (—Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã –æ–±–Ω—É–ª–µ–Ω—ã, –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ)",
        reply_markup=get_main_kb()
    )

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—é–¥–∂–µ—Ç–∞
@dp.callback_query(Form.category, F.data.startswith("transaction_cat_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        
        with SessionLocal() as session:
            transaction = Transaction(
                user_id=callback.from_user.id,
                amount=data['amount'],
                category_id=category_id,
                is_income=data['transaction_type'] == 'income',
                created_at=datetime.now()
            )
            
            if not data['transaction_type'] == 'income':
                budgets = session.query(Budget).filter_by(category_id=category_id).all()
                budget_warnings = []
                
                for budget in budgets:
                    budget.current_spent += data['amount']
                    remaining = budget.amount - budget.current_spent
                    
                    if remaining < 0:
                        budget_warnings.append(
                            f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {budget.category.name}!\n"
                            f"–õ–∏–º–∏—Ç: {budget.amount:.2f} ‚ÇΩ ({budget.period})\n"
                            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget.current_spent:.2f} ‚ÇΩ\n"
                            f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {abs(remaining):.2f} ‚ÇΩ"
                        )
                
                session.add(transaction)
                session.commit()
                
                response = [
                    f"‚úÖ {'–î–æ—Ö–æ–¥' if data['transaction_type'] == 'income' else '–†–∞—Å—Ö–æ–¥'} {data['amount']} ‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
                ]
                
                if budget_warnings:
                    response.append("\n".join(budget_warnings))
                
                await callback.message.answer(
                    "\n".join(response),
                    reply_markup=get_main_kb()
                )
            else:
                session.add(transaction)
                session.commit()
                await callback.message.answer(
                    f"‚úÖ {'–î–æ—Ö–æ–¥' if data['transaction_type'] == 'income' else '–†–∞—Å—Ö–æ–¥'} {data['amount']} ‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                    reply_markup=get_main_kb()
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            reply_markup=get_main_kb()
        )
    finally:
        await state.clear()

# =====================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =====================

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())